@charset "UTF-8";
/**
 * 块（block） + 元素（element） + 修饰符（modifier）
 * CSS命名规范
 * 1、安全的命名，不干扰其它css
 * 2、class尽可能少，且结构清晰
 * 3、嵌套不能太深，不能超过三级
 *
 * @author      fubangfu2015@163.com
 * @date        2020/7/21
 * --------------------------------------------
 */
@import "../constant";

$--namespace: $global-namespace;
$--element-separator: "__";
$--modifier-separator: "--";
$--state-prefix: 'is--';
$--contains: ($--element-separator, $--modifier-separator, $--state-prefix);
$--block-target: ($--element-separator, $--modifier-separator);

/**
 * 将选择器名称转为字符串
 * .selector, -> .selector, -> selector
 *----------------------------------------------------*/
@function selectorToString($selector) {
  $selector: inspect($selector); // 转成字符串
  $selector: str-slice($selector, 2, -2); // 去除一些css标识，获得单纯的css名称
  //@debug #{ $selector + ' > ' +  inspect($selector) + ' > ' + str-slice($selector, 2, -2)};
  @return $selector;
}

/**
 * 是否包含特定规则
 *----------------------------------------------------*/
@function hasContains($selector) {
  $selector: selectorToString($selector);

  @each $unit in $--contains {

    @if str-index($selector, $unit) {
      @return true;
    }
  }

  @return false;
}

/**
 * 从选择器中获得 block 字符串
 *----------------------------------------------------*/
@function getBlock($selector) {
  $selector: selectorToString($selector);
  $startIndex: 999999;

  @each $unit in $--block-target {
    $currentStart: str-index($selector, $unit);

    @if $currentStart and $currentStart < $startIndex {
      $startIndex: $currentStart;
    }
  }

  @return str-slice($selector, 0, $startIndex - 1);
}

/**
 * 块即是Web应用开发中的组件或模块。
 * 每个块在逻辑上和功能上都是相互独立的。
 * 块可以放置在页面上的任何位置，也可以互相嵌套。
 *----------------------------------------------------*/
@mixin b($block) {
  .#{$--namespace}-#{$block} {
    @content;
  }
}

/**
 * 元素是块中的组成部分。元素不能离开块来使用。
 * BEM 不推荐在元素中嵌套其他元素。
 *----------------------------------------------------*/
@mixin e($elements) {
  $selector: &;
  $currentSelector: "";

  @if hasContains($selector) {
    $block: getBlock($selector);
    @each $unit in $elements {
      $currentSelector: #{$currentSelector + '.' + $block + $--element-separator + $unit + ","};
    }

    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }

  } @else {

    @each $unit in $elements {
      $currentSelector: #{$currentSelector + $selector + $--element-separator + $unit + ","};
    }

    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

/**
 * 修饰符用来定义块或元素的外观和行为。
 * 同样的块在应用不同的修饰符之后，会有不同的外观。
 *----------------------------------------------------*/
@mixin m($modifiers) {
  $currentSelector: "";
  @debug &;
  @each $unit in $modifiers {
    $currentSelector: #{$currentSelector + & + $--modifier-separator + $unit + ","};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

/**
 * 状态用来定义块或元素的行为
 *----------------------------------------------------*/
@mixin when($state) {
  @at-root {
    &.#{$--state-prefix + $state} {
      @content;
    }
  }
}

/**
 * 伪类选择
 *----------------------------------------------------*/
@mixin pseudo($pseudo) {
  @at-root #{&}#{':#{$pseudo}'} {
    @content
  }
}

/**
 * 下一个兄弟 element
 *----------------------------------------------------*/
@mixin next($element) {
  $selector: &;
  $block: getBlock($selector);
  @at-root #{$selector} + #{$block + $--element-separator + $element} {
    @content;
  }
}
